import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class BusRouter{
	
	File stopTimesFile;
	File stopsFile;
	TernarySearchTree TST;
	shortestPath SP;

	BusRouter()
	{
		TSTInitialization();
	}
	
	
	void TSTInitialization()
	{
		this.TST =  new TernarySearchTree();
	}
	
	String shortestPath(int stop, int stop2)
	{
		this.SP = new shortestPath("stop_times.txt", "transfers.txt");
		SP.createMap();
		return SP.findShortestPath(stop, stop2);
	}
	
	
	String searchByArrivalTime(String hhmmss) throws FileNotFoundException
	{ 
		
		String[] inputTime = hhmmss.split(":");
		
		if(inputTime.length != 3 && Integer.parseInt(inputTime[0]) > 24 && Integer.parseInt(inputTime[1]) > 60 && Integer.parseInt(inputTime[2]) > 60)
		{
			return "Invalid input";
		}
		else
		{
			String inputTimeSearch = inputTime[0] + inputTime[1]+ inputTime[2]; 
			
		//
		// Test input file
		//
		
		try
		{
			File stoptimesFile = new File("stop_times.txt");
			this.stopTimesFile = stoptimesFile;
			
		}catch(Exception e)
		{
			System.out.print("file not found: stop_times.txt");
		}
		
		//
		// create LinkedMap using arrivalTimesAsKey and busInfo as object
		//
		
		Scanner input = new Scanner(this.stopTimesFile);
		LinkedMap<String, BusInfo> busInfo = new LinkedMap<String, BusInfo>();
		 input.nextLine();
		while(input.hasNextLine())
		{
		  String lineIn = input.nextLine();	
		  String[] line = lineIn.split(",");
		  String tripIDString = line[0];
		  int tripID = Integer.parseInt(tripIDString);
		  String arrivalTimeString = line[1];
		  String[] arrivalTimeFormattedArray = arrivalTimeString.split(":");
		  
		  if(arrivalTimeFormattedArray[0].charAt(0) == ' ')
		  {
			  StringBuilder HourCorrecter = new StringBuilder(arrivalTimeFormattedArray[0]);
			  HourCorrecter.deleteCharAt(0);
			  arrivalTimeFormattedArray[0] = HourCorrecter.toString();
			  
		  }
		
		 
		  
		  //decode arrival to check valid 
		  if(Integer.parseInt(arrivalTimeFormattedArray[0]) > 0 && Integer.parseInt(arrivalTimeFormattedArray[0]) < 24
				  && Integer.parseInt(arrivalTimeFormattedArray[1]) >= 0  && Integer.parseInt(arrivalTimeFormattedArray[1]) < 60
				  && Integer.parseInt(arrivalTimeFormattedArray[0]) < 24 && Integer.parseInt(arrivalTimeFormattedArray[2]) >= 0 && Integer.parseInt(arrivalTimeFormattedArray[2]) < 60)
		  {
			  String key = arrivalTimeFormattedArray[0]+ arrivalTimeFormattedArray[1]+arrivalTimeFormattedArray[2];
			  BusInfo toAdd = new BusInfo();
			  toAdd.trip_id = tripID;
			  toAdd.arrival_time = line[1];
			  toAdd.departure_time = line[2];
			  toAdd.stop_id = Integer.parseInt(line[3]);
			  toAdd.stop_sequence = Integer.parseInt(line[4]);
			  toAdd.stop_headsign = line[5];
			  toAdd.pickup_type = Integer.parseInt(line[6]);
			  toAdd.dropoff_type = Integer.parseInt(line[7]);
			  
			  if(line.length == 7)
			  {
				  toAdd.shape_dist_travelled = Double.parseDouble(line[8]);
			  }else
			  {
				  toAdd.shape_dist_travelled = 0.0;
			  }
			 
			  busInfo.put(key,toAdd);
			  
			  
		  }
		}
		
		Comparator<BusInfo> customComparator = new myCustomTripIDComparator();
		BusInfo[] tripIDObjectArraySorted = new BusInfo[0];
		if(busInfo.containsKey(inputTimeSearch))
		{	
			tripIDObjectArraySorted = Arrays.copyOf(busInfo.valuesToArray(inputTimeSearch), busInfo.valuesToArray(inputTimeSearch).length, BusInfo[].class);
			 Arrays.sort(tripIDObjectArraySorted, customComparator);
		}
	
	
		try
		   {
				File stopsFile = new File("stops.txt");
				this.stopsFile = stopsFile;
				
			}catch(Exception e)
			{
				System.out.print("file not found: stops.txt");
			}
			
			Scanner inputStops = new Scanner(this.stopsFile);
			inputStops.nextLine();
			while(inputStops.hasNextLine())
			{
				String stopsLine = inputStops.nextLine();
				String[] stopsLineParsed = stopsLine.split(",",-1);
				for(int c = 0; c < tripIDObjectArraySorted.length; c++)
				{
					if(tripIDObjectArraySorted[c].stop_id == Integer.parseInt(stopsLineParsed[0]))
					{
						tripIDObjectArraySorted[c].stop_code = stopsLineParsed[1];
						tripIDObjectArraySorted[c].stop_name = stopsLineParsed[2];
						tripIDObjectArraySorted[c].stop_desc = stopsLineParsed[3];
						tripIDObjectArraySorted[c].stop_lat = stopsLineParsed[4];
						tripIDObjectArraySorted[c].stop_lon = stopsLineParsed[5];
						tripIDObjectArraySorted[c].zone_id = stopsLineParsed[6];
						tripIDObjectArraySorted[c].stop_url = stopsLineParsed[7];
						tripIDObjectArraySorted[c].location_type = stopsLineParsed[8];
						tripIDObjectArraySorted[c].parent_station = stopsLineParsed[9];
					}
				}
				
			}
		
			String output = "";
			
			for(int i = 0; i< tripIDObjectArraySorted.length; i++)
			{
				output = output + tripIDObjectArraySorted[i].outputInfo();
			}
			return output;
		
	}	
		
		
  }
	
}
