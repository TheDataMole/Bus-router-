import java.io.File;
import java.io.FileNotFoundException;
import java.lang.IllegalArgumentException;
import java.util.Arrays;
import java.util.Scanner;
import java.lang.StringBuilder;

public class TernarySearchTree {
	
	public int size;
	public Node root;
	public File stopsFile;
	
	void File()
	{
	    try {
				File stopsFile = new File("stops.txt");
				this.stopsFile = stopsFile;
	    } catch(Exception e) {
				System.out.print("File not found: stops.txt");
		}
	}
	
 
	
  // code related to the Node object
	private class Node
	{
		public Node left, mid, right;
		Character character;
		public StopInfo value;
		public boolean containsStop = false;
		
		public Node(String key, StopInfo value) 
		{
			if (key.isEmpty() || value == null) throw new IllegalArgumentException();
			this.character = key.charAt(0);
			
			if (key.length() > 1) this.mid = new Node(key.substring(1), value);
			else {
				this.value = value;
				this.containsStop = true;
			}
		}
		
		private Node add(String key, StopInfo value)
		{
			Character c = key.charAt(0);
			if ((this.character).equals(c) == true) {
				if (key.length() == 1) {
					this.value = value;
					this.containsStop = true;
					size++;
					return this;
				}
				else if (this.mid != null)
				{
					return mid.add(key.substring(1), value);
				}
				else 
				{
					this.mid = new Node(key.substring(1), value);
					return mid.search(key.substring(1));
				}
			}
		
			else if (c.compareTo(character) < 0)
			{
				if (this.left != null) 
				{
					return left.add(key, value);
				}
				else 
				{
					left = new Node(key, value);
					size++;
					return left.search(key);
				}
			} 
			if (this.right != null) return right.add(key, value);
			else
			{
				right = new Node(key, value);
				size++;
				return right.search(key);
			}
	    }
		
    	private Node search(String key) {
		if (key.isEmpty()) return null;
			Character c = key.charAt(0);
		if (c.equals(this.character)) {
        		if (key.length() == 1) return this;
        		else if (this.mid == null) return null;
        		else return this.mid.search(key.substring(1));
      		} else if (c.compareTo(this.character) < 0) {
        		if (left == null) return null;
        		else return left.search(key);
      		} else {
        		if (right == null) return null;
        		else return right.search(key);
            }
	    }
	}

    //Use this one for finding stops with just the start
    //of words
    private String searchStops(String key) {
      StringBuilder builder = new StringBuilder();
      Node searchKeyRoot = searchToEndOfKey(root, key, 0);
      returnListOfStops(searchKeyRoot, "", builder, key);
      if (builder.length() < 1) return "No Matches Found :/";
      return builder.toString();
    }

    private Node searchToEndOfKey(Node node, String key, int ptr) {
      Character c = key.charAt(0);
      if (node == null) return null;
      if (c.equals(node.character)) return searchToEndOfKey(node.left, key, ptr);
      else if (c.compareTo(node.character) < 0) return searchToEndOfKey(node.right, key, ptr);
      else {
        if (ptr == key.length() - 1) return node;
        else return searchToEndOfKey(node.mid, key, ptr + 1);
      }
    }

    private void returnListOfStops(Node node, String string, StringBuilder sb, String key) {
      if (node != null) {
        returnListOfStops(node.left, string, sb, key);
        string = string + node.value.outputInfo();
        if (node.containsStop) sb.append(key + string.substring(1) + "\n");
        returnListOfStops(node.mid, string, sb, key);
        string = string.substring(0, string.length() - 1);
        returnListOfStops(node.right, string, sb, key);
      }
    }
    
  // read stopsFile into system, creating first a String
  // object, then a StopInfo object, for each line,
  // adding them to an array
    
  public StopInfo[] readStopsInfoFileIntoArray() throws FileNotFoundException {
    String stopsAsLines[] = null;
    StopInfo stops[] = null;
    String stopName;
    String stopFirstWord;

    Scanner readStops = new Scanner(stopsFile);
    readStops.nextLine();
    int count = 0;
    while (readStops.hasNextLine()) {
      stopsAsLines[count] = readStops.nextLine();
      count++;
    }
    for (int i = 0; i < stopsAsLines.length; i++) {
      String splitLine[] = stopsAsLines[i].split(",", -1);
      //this next bit checks if the first word of the stop name is one of a few, and moves it to the end if need be
      stopName = splitLine[2];
      String splitStopName[] = stopName.split(" ", -1);
      stopFirstWord = splitStopName[0];
      if ((stopFirstWord.equals("FLAGSTOP")) || (stopFirstWord.equals("WB")) || (stopFirstWord.equals("NB")) || (stopFirstWord.equals("SB")) || (stopFirstWord.equals("EB"))) {
        int wordIndex = stopName.indexOf(" ") + 1;
        String newName = stopName.substring(wordIndex);
        splitLine[2] = newName + " " + stopFirstWord;
      }
      //assign values to StopInfo object
      stops[i].setInfo(splitLine[0], splitLine[1], splitLine[2], splitLine[3], splitLine[4], splitLine[5], splitLine[6], splitLine[7], splitLine[8], splitLine[9]);
    }
    readStops.close();
    return stops;
  }
  
  //creation of the trie
    public TernarySearchTree() {
        this.size = 0;
        this.root = null;
        StopInfo stops[] = null;
        
        File();
        try {
            stops = readStopsInfoFileIntoArray();
        } catch(Exception e) {
			System.out.println("File not found: stops.txt.");
        }
        
        for (StopInfo stop : stops) {
            this.add(stop.stop_name, stop);
        }
    }
     
    public void add(String key, StopInfo value) {
        if (root == null) {
		    root = new Node(key, value);
            size = 1;
		} else {
		    root.add(key, value);
		}
    }
    
    public String search(String key) {
        return searchStops(key.toUpperCase());
    }
}
