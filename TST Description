Firstly, a Ternary Search Tree is initialised and created using a three step process. First: the stops file is read into an array line by line. Second: each line is split using the String.split() method and converted into a StopInfo object, which contains a variable for each element in the line. Third and finally, the array of StopInfo objects is converted into nodes and added to the tree one by one, with the object itself as the value and the stop_name variable as the key.

After that, the searchStops() function works as follows. First, it searches for a path that matches the key, same as any ternary search tree. However, if it reaches the end of the key, instead of only returning the data on that node, it goes down every path branching off from that node, and every time it finds a node with a StopInfo object it adds its info to the list, since we know that the only StopInfo objects it will encounter are ones where the start of the stop names match the key. After the trawl, it returns the whole String, which is neatly formatted and ready for printing.
